check {1 copy + .= 2}
check {1 3 5 drop + .= 4}
check {1 3 swap - .= 2}

check {(1 3 5 7 $(a b c _; b a .+ c)) .= (3 6)}

check {1000 copy +1! is}
check {1000 copy -1! is}

check {(1 2 3 rotl) .= (3 1 2)}
check {(1 2 3 rotr) .= (2 3 1)}

check {_.type .= Nil}
check {Nil.isa A .= _}
check {Nil.isa A? .= A?}

check {'42.= 42}

check {'foo.is 'foo}
check {'foo.is 'bar not}
check {'{6 7 *} compile call .= 42}
check {'{6 % *} 7 splice compile call .= 42}

{
  let foo 7
  '{6 % *} foo splice
} check {compile call .= 42}

check {42.type .= Int}
check {Int.isa A .= Num}

check {T len.= 1}

check {T int.= 1}
check {F int.= 0}

check {F or 42 .= 42}
check {42 or T .= 42}

check {F and 42 .= F}
check {T and 42 .= 42}

check {T if {42} .= 42}
check {F else {42} .= 42}

check {(3 for _).= (0 1 2)}
check {(3 for +1!).= (1 2 3)}
check {(3 repeat 42).= (42 42 42)}
check {(3 while {-1! copy} drop).= (2 1 0)}

check {42 len.= 42}
check {(3 iter for _).= (0 1 2)}
check {(3 iter pop swap pop swap pop swap drop).=(0 1 2)}
check {((1 3 5).map &+1! for _).= (2 4 6)}
check {((1 3 5).filter &{.> 2} for _).= (3 5)}
check {(('foo 'bar).zip (1 3 5) for _) .= ('foo:1 'bar:3)}
check {('foo:1 'bar:3) unzip.= (1 3) and.= ('foo 'bar)}

check {1_000_000.= 1000000}
check {0b101010.= 42}
check {0x2a.= 42}
check {41 +1! .= 42}
check {43 -1! .= 42}
check {6.* 7 .= 42}

check {42.= 42.0 not}
check {42 3 fix.= 42.000}

check {1.< 3}
check {3.> 1}

check {0.23 .+ 0.1 .= 0.33}
check {0.5 .+! 0.25 .= 0.7}

{
  let foo 42
  check {foo.= 42}
}

{
  method foo() 42
  check {foo.= 42}
}

{
  method foo(Bool) {drop 1}
  method foo(Int)  {drop 3}
  method foo(42)   {drop 5}
  check {T foo.= 1}
  check {41 foo.= 3}
  check {42 foo.= 5}
}

check {2 hours.-{30 mins} mins.= 90}

check {&&&T call.is T}
check {&{42} call.= 42}
check {6 7 &* call.= 42}
check {6 7 &*[Int Int] call.= 42}

check {1:3 type.isa Pair}
check {1 3 pair type.isa Pair}
check {1:3 unpair + .= 4}
check {('foo:42 for _).= ('foo 42)}
check {'foo:42 len.= 2}

check {(1 3 5).is (1 3 5) not}
check {(1 3 5).= (1 3 5)}
check {(1 3 5 7) len.= 4}
check {(1 3; 5 7) pop.= (5 7) and.= (1 3)}
check {(1 3) 5 push.= (1 3 5)}
check {() pop.is _ and.= ()}

{
  method foo(T) {drop 'done1}
  method foo(A) {drop T recall foo 'done2}
  check {42 foo .is 'done1}
}

{
  method fib(0)   _
  method fib(1)   _
  method fib(Int) {-1! copy fib swap -1! fib +[Int Int]}
  check {20 fib .= 6765}
}

{
  method fib(0 Int Int)   {rotr drop drop}
  method fib(1 Int Int)   {rotl drop drop}
  method fib(Int Int Int) {rotr -1! rotl copy rotl + fib}
  check {20 0 1 fib .= 6765}
}

{
  method fib(0 Int Int)   {$(_ a _; a)}
  method fib(1 Int Int)   {$(_ _ b; b)}
  method fib(Int Int Int) {$(n a b; n -1! b a .+ b) recall fib}
  check {20 0 1 fib .= 6765}
}

{
  method fib(Int) {0 1 rotr repeat {copy rotl +} drop}
  check {20 fib .= 6765}
}

dump-stack
_ mark-sweep usecs dump
