check {1 .: + .= 2}
check {1 3 5 :. + .= 4}
check {1 3 :: - .= 2}

check {_.type .= Nil}
check {Nil.isa A .= _}
check {Nil.isa A? .= A?}

check {'foo.is 'foo}
check {'foo.is 'bar not}
check {'{6 7 *} compile call .= 42}

check {42.type .= Int}
check {Int.isa A .= Num}

check {F or 42 .= 42}
check {42 or T .= 42}

check {F and 42 .= F}
check {T and 42 .= 42}

check {T if {42} .= 42}
check {F else {42} .= 42}

check {3 while {.: -1} + + + .= 6}

check {41 +1 .= 42}
check {43 -1 .= 42}
check {6.* 7 .= 42}

check {42.= 42.0 not}

check {1.< 3}
check {3.> 1}

{
  let foo 42
  check {foo.= 42}
}

{
  method foo(Bool) {:. 1}
  method foo(Int)  {:. 3}
  method foo(42)   {:. 5}
  check {T foo.= 1}
  check {41 foo.= 3}
  check {42 foo.= 5}
}

check {2 hours.-{30 mins} mins.= 90}

check {&&&T call.is T}
check {&{42} call.= 42}
check {6 7 &* call.= 42}
check {6 7 &*[Int Int] call.= 42}

check {,1 3 type.isa Pair}
check {1 3 pair type.isa Pair}
check {,1 3 unpair + .= 4}

check {(1 3 5).is (1 3 5) not}
check {(1 3 5).= (1 3 5)}
check {(1 3 5 7) len.= 4}
check {(1 3; 5 7) .: pop .= (5 7) and .= (1 3)}
check {(1 3) .: 5 push .= (1 3 5)}

dump-stack
_ mark-sweep usecs dump
