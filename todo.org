switch (
  |,{.< 42} {
              
  }

  |,T {
  
  }
)

* add method macro
** compile body with_env
** add beg_pc
* add scope readme
* --
* add for macro
** add Type.iter method with callback
* add stack lib
** add copy(n offs), clone(n, offs), swap(x y) & drop(n offs) methods
*** add backing Stack methods
* add stack literals
** (1 2 3; 4 5)
** parse suffix as separate stack
* add switch
** use branch op
*** pop_if = true
** add jump op
* implement MethodSet.clone
** switch to use vector/upper_bound like env
*** drop method Node
* add |-support for values
** eval in Lit.compile if cte
* add ref-support
** RefForm
** resolve at compile time
*** &foo -> Macro/Method(Set)
*** &{} -> Lambda
** add call method
* add static array of Int vals
** add MAX_FAST_INT
* inherit macro from method
** add separate imp
** use dispatch for expand
* reimplement read_int manually like read_frac
** keep hex support
* add Byte type
** Imp = uint8_t
** read hex as byte if < 256
** add int/byte conversions
* add Char type
** cidk
** add reader support
*** \r \n \t \s \e
*** \0x2a \90 \\A \\a \\\
** add conversion to/from int/byte
* add CallMethodOp
** emit with first method if len(set) == 1
** throw error unless Method.applicable()
* add MethodSet.nargs
** add constructor arg
** add test in add_method
** push first instead of set in id compile if !nargs
* add quote
** '(1 2 3) 'foo
* add string type
* add say method
** add val.print
*** default to dump
*** print symbols with quote
*** print stack items in sequence
*** print pair items separated by space
* add C++ emit
** add -build mode
** use label/goto
