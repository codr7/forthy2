* add block-scoped method imps to readme
** copy test
** use syms instead of ints
** push
* --
* switch imp-macros to take args on stack
** remove macro imp form/in-args
*** push form last on stack
** update macro defs
*** pop form & reverse arg order
*** drop type checks
* add method stash support
** replace Val.call bools with CallFlags enum
*** forward via call op
* unify macros and methods
** replace macro ref return logic/test with recall
* quote items in quoted stacks
* move type/isa to meta lib
* macro readme
* --
* change Val operator bool -> to_bool
* add sum types
** Fix|Int
*** parse & sort types if | found
* add int(fix) conv
** use trunc
* add int/fix.neg() methods
** rename fix.neg to is_neg()
* add id(Type/Method/MethodSet) methods to meta lib
* --
* add char/str types
** cidk
** \r \n \t \s \e
** \0x2a \90 \\A \\a \\\
** add literals
** add char/str(int) and int(char/str) conversions
*** use read_int for int(str)
* implement Nil unquote as ref(cx.nil_form)
* implement Form unquote as ref(*this)
* move nil (_) from reader to root_scope like T/F
** add root_scope lookup in read_id
* --
* add splice features
** add optional splice id
*** %foo
*** store in SpliceForm
** pairs
*** '{%x .* %y} splice(x:6 y:7)
*** $ pops stack 
**** 6 7 '{%x .* %y} splice(x:$ y:$) 
** expressions
*** '{%x .* %y} splice(x:{3 .* 2} y:{4 .+ 3})
** splice items if val is stack
*** '{%} splice ((1 2 3)) -> {1 2 3}
* ---
* add enum
** add UserType
*** override Val methods to dispatch if != set.root.next
** add EnumType < UserType
** enum Month (JAN ... DEC)
** bind members in scope
** provide conversion to-from int
* add Date type
** 1977 JUL 5 date.+{23 59 59 time}
** add date/time constructors
** add Timestamp +/- Time
** add today/now
* convert is/isa/not/type to macros/ops
* plug valgrind quote memory leak
* add Form.eq overrides
* add next-method
** search call chain for method call
*** return next from method.set
**** _ if missing
* add loop macro
** loop until break
** add LoopOp
** add break macro
*** add cx.break_pc
* implement clone for iter types
* add echo iter
** 3 iter echo zip for _* add Byte type
** Imp = uint8_t
** read hex as byte if < 256
** add int/char conversions
* add restarts/break loop
* add unsafe {} macro
* add C++ emit
** add -build mode
** use label/goto
