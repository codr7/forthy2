* return false from is/= if different types
* add scope support for ;
** compile as separate scope
** add scope readme
* add else macro
* add method macro
** clone env on compile
** compile body with_env on first use
* add clock macro/op
** pop reps from stack

* clone env in ScopeForm
** transform using Val.clone
** implement MethodSet.clone
* add stack literals
** (1 2 3; 4 5)
** parse suffix as separate stack
* add mark(ns)/sweep(ns) fns
** return time taken when done
** change cx result to optional<uint64_t>
** call at end of test/run.f2
* --
* inherit macro from method
** add separate imp
** use dispatch for expand
* reimplement read_int manually like read_frac
** keep hex support
* add Byte type
** Imp = uint8_t
** read hex as byte if < 256
** add int/byte conversions
* add Char type
** cidk
** add reader support
*** \r \n \t \s \e
*** \0x2a \90 \\A \\a \\\
** add conversion to/from int/byte
* add CallMethodOp
** emit with first method if len(set) == 1
** throw error unless Method.applicable()
* add MethodSet.nargs
** add constructor arg
** add test in add_method
** push first instead of set in id compile if !nargs
* add ref-support
** &foo -> Macro/Method(Set)
** &{} -> Lambda
** add call method
* add |-support for values
** eval on compile stack in Lit.compile if cte
* add quote
** '(1 2 3) 'foo
* add string type
* add say method
** add val.print
*** default to dump
*** print symbols with quote
*** print stack items in sequence
*** print pair items separated by space
* add C++ emit
** add -build mode
** use label/goto
